{"version":3,"sources":["components/quote-card.js","components/quote-card-styles.js","api/quotes-api.js","actions/quote-actions.js","actions/status-actions.js","constants.js","components/quote-container.js","store/initial-state.js","reducers/combined-reducers.js","reducers/quote-reducer.js","reducers/status-reducer.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","card","width","minHeight","progress","marginLeft","spacing","root","mixins","gutters","paddingTop","paddingBottom","backgroundColor","quoteText","quoteAuthor","classes","isLoading","onGenerateQuote","isError","Card","className","CardHeader","subheader","style","display","justifyItems","justifyContent","Button","data-testid","variant","color","disabled","onClick","CircularProgress","Divider","CardContent","Paper","elevation","Fragment","id","marginTop","CardActions","href","target","IconButton","aria-label","getQuote","a","fetch","res","json","data","quote","character","requestQuote","dispatch","type","result","payload","QuoteContainer","useDispatch","useSelector","state","status","useEffect","appReducer","combineReducers","initialState","action","createStore","applyMiddleware","thunk","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kaAkGeA,eClGgB,SAAAC,GAAK,MAAK,CACvCC,KAAM,CACJC,MAAO,IACPC,UAAW,KAEbC,SAAU,CACRC,WAAYL,EAAMM,QAAQ,IAE5BC,KAAK,eACAP,EAAMQ,OAAOC,UADd,CAEFC,WAAYV,EAAMM,QAAQ,GAC1BK,cAAeX,EAAMM,QAAQ,GAC7BM,gBAAiB,eDsFNb,EAjFG,SAAC,GAOZ,IANLc,EAMI,EANJA,UACAC,EAKI,EALJA,YACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,QAEA,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAWL,EAAQd,MACvB,kBAACoB,EAAA,EAAD,CACEC,UACE,yBACEC,MAAO,CACLC,QAAS,OACTC,aAAc,OACdC,eAAgB,SAGlB,kBAACC,EAAA,EAAD,CACEC,cAAY,YACZC,QAAQ,WACRC,MAAM,UACNC,SAAUf,EACVgB,QAASf,GALX,kBASCD,GACC,kBAACiB,EAAA,EAAD,CACEL,cAAY,oBACZR,UAAWL,EAAQX,cAM7B,kBAAC8B,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACGjB,GACC,kBAACkB,EAAA,EAAD,CAAOhB,UAAWL,EAAQR,KAAM8B,UAAW,GACzC,iEAGFnB,GACA,kBAAC,IAAMoB,SAAP,KACGzB,GAAa,kBAAC,IAAD,MACd,0BAAM0B,GAAG,QAAQ1B,GAChBA,GAAa,kBAAC,IAAD,MACd,6BACA,0BAAM0B,GAAG,SAAShB,MAAO,CAAEiB,UAAW,MAAOhB,QAAS,UACnDV,KAKT,kBAACoB,EAAA,EAAD,MACA,kBAACO,EAAA,EAAD,KACE,uBACEF,GAAG,cACHG,KAAI,iDAA4C7B,EAA5C,gBAA6DC,GACjE6B,OAAO,SAEP,kBAACC,EAAA,EAAD,CAAYC,aAAW,eACrB,kBAAC,IAAD,a,yBEjFCC,EAAQ,uCAAG,8BAAAC,EAAA,+EAEFC,MAAM,gDAFJ,cAEdC,EAFc,gBAGDA,EAAIC,OAHH,YAGdC,EAHc,UAIRA,EAAK,GAJG,yCAKX,CACLtC,UAAWsC,EAAK,GAAGC,MACnBtC,YAAaqC,EAAK,GAAGE,YAPL,kFAWb,SAXa,0DAAH,qDCORC,EAAe,yDAAM,WAAMC,GAAN,eAAAR,EAAA,6DAChCQ,ECFoC,CACpCC,KCP8B,qBFOE,SAGXV,IAHW,OAG1BW,EAH0B,OAM9BF,EADa,UAAXE,ECF+B,CACnCD,KCT6B,mBDYY,CACzCA,KCdgC,qBDehCE,QDD6BD,IARG,2CAAN,uD,QGmBbE,MArBf,WACE,IAAMJ,EAAWK,cADO,EAGOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAlD/C,EAHgB,EAGhBA,UAAWE,EAHK,EAGLA,QACbkC,EAAQS,aAAY,SAAAC,GAAK,OAAIA,EAAMV,SAMzC,OAJAY,qBAAU,WACRT,EAASD,OACR,CAACC,IAGF,kBAAC,EAAD,CACE1C,UAAWuC,EAAMvC,UACjBC,YAAasC,EAAMtC,YACnBE,UAAWA,EACXC,gBAAiB,kBAAMsC,EAASD,MAChCpC,QAASA,K,QCrBA,GACbkC,MAAO,CACLvC,UAAW,GACXC,YAAa,IAEfiD,OAAQ,CACN/C,WAAW,EACXE,SAAS,ICHN,IAAM+C,EAAaC,YAAgB,CACxCd,MCFa,WAAoD,IAArCU,EAAoC,uDAA5BK,EAAaf,MAAOgB,EAAQ,uCAChE,OAAQA,EAAOZ,MACb,IJJ8B,qBIK5B,OAAO,eAAKY,EAAOV,SACrB,IJL2B,kBIMzB,OAAO,eAAKS,EAAaf,OAC3B,QACE,OAAOU,IDJXC,OECa,WAAsD,IAAtCD,EAAqC,uDAA7BK,EAAaJ,OAAQK,EAAQ,uCAClE,OAAQA,EAAOZ,MACb,ILT4B,mBKU1B,OAAO,eAAKM,EAAZ,CAAmB9C,WAAW,IAChC,ILV8B,qBKW5B,MAAO,CAAEA,WAAW,EAAOE,SAAS,GACtC,ILX2B,kBKYzB,MAAO,CAAEF,WAAW,EAAOE,SAAS,GACtC,QACE,OAAO4C,M,QCXEO,cAAYJ,EAAYE,EAAcG,YAAgBC,MCWtDC,MAVf,WACE,OACE,yBAAKpD,UAAU,OACb,kBAAC,IAAD,CAAUqD,MAAOA,GACf,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57236786.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Twitter } from \"mdi-material-ui\";\r\nimport { FormatQuoteOpen } from \"mdi-material-ui\";\r\nimport { FormatQuoteClose } from \"mdi-material-ui\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { quoteCardStyles } from \"./quote-card-styles\";\r\n\r\nconst QuoteCard = ({\r\n  quoteText,\r\n  quoteAuthor,\r\n  classes,\r\n  isLoading,\r\n  onGenerateQuote,\r\n  isError\r\n}) => {\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardHeader\r\n        subheader={\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyItems: \"left\",\r\n              justifyContent: \"left\"\r\n            }}\r\n          >\r\n            <Button\r\n              data-testid=\"new-quote\"\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              disabled={isLoading}\r\n              onClick={onGenerateQuote}\r\n            >\r\n              Generate Quote\r\n            </Button>\r\n            {isLoading && (\r\n              <CircularProgress\r\n                data-testid=\"loading-indicator\"\r\n                className={classes.progress}\r\n              />\r\n            )}\r\n          </div>\r\n        }\r\n      />\r\n      <Divider />\r\n      <CardContent>\r\n        {isError && (\r\n          <Paper className={classes.root} elevation={1}>\r\n            <span>Oops! Something is not right!</span>\r\n          </Paper>\r\n        )}\r\n        {!isError && (\r\n          <React.Fragment>\r\n            {quoteText && <FormatQuoteOpen />}\r\n            <span id=\"text\">{quoteText}</span>\r\n            {quoteText && <FormatQuoteClose />}\r\n            <br />\r\n            <span id=\"author\" style={{ marginTop: \"1em\", display: \"block\" }}>\r\n              {quoteAuthor}\r\n            </span>\r\n          </React.Fragment>\r\n        )}\r\n      </CardContent>\r\n      <Divider />\r\n      <CardActions>\r\n        <a\r\n          id=\"tweet-quote\"\r\n          href={`https://twitter.com/intent/tweet?text=\"${quoteText}\" by ${quoteAuthor}`}\r\n          target=\"blank\"\r\n        >\r\n          <IconButton aria-label=\"Tweet Quote\">\r\n            <Twitter />\r\n          </IconButton>\r\n        </a>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nQuoteCard.propTypes = {\r\n  quoteText: PropTypes.string.isRequired,\r\n  quoteAuthor: PropTypes.string.isRequired,\r\n  isLoading: PropTypes.bool.isRequired,\r\n  onGenerateQuote: PropTypes.func.isRequired,\r\n  classes: PropTypes.object.isRequired,\r\n  isError: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default withStyles(quoteCardStyles)(QuoteCard);\r\n","export const quoteCardStyles = theme => ({\r\n  card: {\r\n    width: 600,\r\n    minHeight: 200\r\n  },\r\n  progress: {\r\n    marginLeft: theme.spacing(2)\r\n  },\r\n  root: {\r\n    ...theme.mixins.gutters(),\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n    backgroundColor: \"#ffc200\"\r\n  }\r\n});\r\n","export const getQuote = async function() {\r\n  try {\r\n    const res = await fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\");\r\n    const data = await res.json();\r\n    if (data && data[0]) {\r\n      return {\r\n        quoteText: data[0].quote,\r\n        quoteAuthor: data[0].character\r\n      };\r\n    }\r\n  } catch (error) {\r\n    return \"error\";\r\n  }\r\n};\r\n\r\nexport default getQuote;\r\n","import {\r\n  fetchingStarted,\r\n  fetchingFailed,\r\n  fetchingSucceeded\r\n} from \"./status-actions\";\r\nimport { getQuote } from \"../api/quotes-api\";\r\n\r\nexport const requestQuote = () => async dispatch => {\r\n  dispatch(fetchingStarted());\r\n\r\n  const result = await getQuote();\r\n\r\n  if (result === \"error\") {\r\n    dispatch(fetchingFailed());\r\n  } else {\r\n    dispatch(fetchingSucceeded(result));\r\n  }\r\n};\r\n","import {\r\n  FETCHING_STARTED,\r\n  FETCHING_SUCCEEDED,\r\n  FETCHING_FAILED\r\n} from \"../constants\";\r\n\r\nexport const fetchingStarted = () => ({\r\n  type: FETCHING_STARTED\r\n});\r\n\r\nexport const fetchingFailed = () => ({\r\n  type: FETCHING_FAILED\r\n});\r\n\r\nexport const fetchingSucceeded = quote => ({\r\n  type: FETCHING_SUCCEEDED,\r\n  payload: quote\r\n});\r\n","export const FETCHING_STARTED = \"FETCHING_STARTED\";\r\nexport const FETCHING_SUCCEEDED = \"FETCHING_SUCCEEDED\";\r\nexport const FETCHING_FAILED = \"FETCHING_FAILED\";\r\n","import React, { useEffect } from \"react\";\r\nimport QuoteCard from \"./quote-card\";\r\nimport { requestQuote } from \"../actions/quote-actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction QuoteContainer() {\r\n  const dispatch = useDispatch();\r\n\r\n  const { isLoading, isError } = useSelector(state => state.status);\r\n  const quote = useSelector(state => state.quote);\r\n\r\n  useEffect(() => {\r\n    dispatch(requestQuote());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <QuoteCard\r\n      quoteText={quote.quoteText}\r\n      quoteAuthor={quote.quoteAuthor}\r\n      isLoading={isLoading}\r\n      onGenerateQuote={() => dispatch(requestQuote())}\r\n      isError={isError}\r\n    />\r\n  );\r\n}\r\n\r\nexport default QuoteContainer;\r\n","export default {\r\n  quote: {\r\n    quoteText: \"\",\r\n    quoteAuthor: \"\"\r\n  },\r\n  status: {\r\n    isLoading: false,\r\n    isError: false\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport quoteReducer from \"./quote-reducer\";\r\nimport statusReducer from \"./status-reducer\";\r\n\r\nexport const appReducer = combineReducers({\r\n  quote: quoteReducer,\r\n  status: statusReducer\r\n});\r\n","import initialState from \"../store/initial-state\";\r\nimport { FETCHING_SUCCEEDED, FETCHING_FAILED } from \"../constants\";\r\n\r\nexport default function quote(state = initialState.quote, action) {\r\n  switch (action.type) {\r\n    case FETCHING_SUCCEEDED:\r\n      return { ...action.payload };\r\n    case FETCHING_FAILED:\r\n      return { ...initialState.quote };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import initialState from \"../store/initial-state\";\r\nimport {\r\n  FETCHING_STARTED,\r\n  FETCHING_SUCCEEDED,\r\n  FETCHING_FAILED\r\n} from \"../constants\";\r\n\r\nexport default function status(state = initialState.status, action) {\r\n  switch (action.type) {\r\n    case FETCHING_STARTED:\r\n      return { ...state, isLoading: true };\r\n    case FETCHING_SUCCEEDED:\r\n      return { isLoading: false, isError: false };\r\n    case FETCHING_FAILED:\r\n      return { isLoading: false, isError: true };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { appReducer } from \"../reducers/combined-reducers\";\r\nimport initialState from \"./initial-state\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport default createStore(appReducer, initialState, applyMiddleware(thunk));\r\n","import React from \"react\";\nimport \"./App.css\";\nimport QuoteContainer from \"./components/quote-container\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Provider store={store}>\n        <QuoteContainer />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}